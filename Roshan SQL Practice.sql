-- Question 1
CREATE DATABASE companydb;
USE companydb;
-- Question 2
CREATE TABLE department
(dno INT PRIMARY KEY, 
dname VARCHAR(30),
mgrssn INT, 
mgrstartdate DATE);

CREATE TABLE employee
(ssn INT PRIMARY KEY,fname VARCHAR(30),lname VARCHAR(30),address VARCHAR(200),
sex VARCHAR(1),salary INT,superssn INT,dno INT,
FOREIGN KEY (superssn) REFERENCES employee(ssn),
FOREIGN KEY (dno) REFERENCES Department(dno));

ALTER TABLE department ADD CONSTRAINT 
FOREIGN KEY (mgrssn) REFERENCES employee(ssn);

CREATE TABLE dlocation
(dno INT, dloc VARCHAR(1),
PRIMARY KEY(dno,dloc),
FOREIGN KEY (dno) REFERENCES department(dno));

CREATE TABLE project
(pno INT PRIMARY KEY ,
pname VARCHAR(30),
plocation VARCHAR(30),
dno INT,
FOREIGN KEY (dno) REFERENCES department(dno)
);
CREATE TABLE works_on
(
ssn INT, 
pno INT,
hours INT,
PRIMARY KEY(ssn,pno),
FOREIGN KEY (ssn) REFERENCES employee(ssn),
FOREIGN KEY (pno) REFERENCES project(pno)
);

INSERT INTO employee(ssn,fname,lname,address,sex,salary) VALUES 
(1,'Roshan','Aji Cherian','Trivandrum','M',50000),
(2,'Adwaid','M','Kochi','M',50000),
(3,'Vinayak','Naveen','Trivandrum','M',50000),
(4,'Gowri','Arunsha','Trivandrum','F',50000),
(5,'Suryanaryan','Menon','Trivandrum','M',50000);

INSERT INTO department  
(dno,dname,mgrssn,mgrstartdate) VALUES
(1,'CS',1,"2020-05-12"),
(2,'EC',2,"2019-06-08"),
(3,'IT',3,"2020-04-24"),
(4,'EE',4,"2021-05-22"),
(5,'ME',5,"2019-03-15");

INSERT INTO dlocation
(dno,dloc) VALUES
(1,'A'),
(1,'B'),
(1,'C'),
(1,'D'),
(1,'E');

INSERT INTO project(pno,pname,plocation,dno)
VALUES 
(1,'P1','ploc1',1),
(2,'P2','ploc2',2),
(3,'P3','ploc3',1),
(4,'P4','ploc4',1),
(5,'P5','ploc5',2),
(6,'P6','ploc6',3);
INSERT INTO works_on (ssn,pno,hours)
VALUES
(1,1,10),
(2,2,4),
(3,3,5),
(4,4,8),
(5,5,10),
(5,6,10);
UPDATE EMPLOYEE SET SALARY=80000, DNO=1 WHERE SSN=1;
UPDATE EMPLOYEE SET SUPERSSN=1, SALARY=40000, DNO=2 WHERE SSN=2;
UPDATE EMPLOYEE SET SUPERSSN=1, SALARY=85000, DNO=3 WHERE SSN=3;
UPDATE EMPLOYEE SET SUPERSSN=1, SALARY=72000, DNO=4 WHERE SSN=4;
UPDATE EMPLOYEE SET SUPERSSN=1, SALARY=83000, DNO=5 WHERE SSN=5;

-- Question 3
SELECT * from employee;
SELECT * from department;
SELECT * from dlocation;
SELECT * from project;
SELECT * from works_on;

-- Question 4
ALTER TABLE EMPLOYEE ADD COLUMN DOB DATE;

-- Question 5
UPDATE EMPLOYEE SET DOB="1976-02-25" WHERE SSN=1;
UPDATE EMPLOYEE SET DOB="1980-03-16" WHERE SSN=2;
UPDATE EMPLOYEE SET DOB="1955-04-24" WHERE SSN=3;
UPDATE EMPLOYEE SET DOB="1990-12-23" WHERE SSN=4;
UPDATE EMPLOYEE SET DOB="1999-03-04" WHERE SSN=5;

-- Question 6
SELECT * FROM EMPLOYEE WHERE DOB BETWEEN "1970-01-01" AND "1990-12-31";

-- Question 7
SELECT FNAME,LNAME,TIMESTAMPDIFF(YEAR,DOB,CURDATE()) FROM EMPLOYEE;

-- Question 8
SELECT E.FNAME,E.LNAME,D.DNAME FROM EMPLOYEE AS E INNER JOIN DEPARTMENT AS D ON E.DNO=D.DNO WHERE D.DNAME<>"CS";

-- Question 9
SELECT E.SSN FROM EMPLOYEE AS E INNER JOIN DEPARTMENT AS D ON E.DNO=D.DNO 
INNER JOIN PROJECT AS P ON D.DNO=P.DNO;

-- Question 10
SELECT E.SSN FROM EMPLOYEE AS E WHERE E.SSN NOT IN (
SELECT E.SSN FROM EMPLOYEE AS E INNER JOIN DEPARTMENT AS D ON E.DNO=D.DNO 
INNER JOIN PROJECT AS P ON D.DNO=P.DNO);

-- Question 11
SELECT E.FNAME,E.LNAME FROM EMPLOYEE AS E WHERE E.SSN NOT IN (
SELECT E.SSN FROM EMPLOYEE AS E INNER JOIN DEPARTMENT AS D ON E.DNO=D.DNO 
INNER JOIN PROJECT AS P ON D.DNO=P.DNO);

-- Question 12
SELECT D.DNAME,COUNT(P.PNO) FROM PROJECT AS P INNER JOIN DEPARTMENT AS D ON D.DNO=P.DNO
GROUP BY (D.DNAME)
ORDER BY(DNAME);

-- Question 13
SELECT P.PNO,P.PNAME FROM PROJECT AS P INNER JOIN WORKS_ON AS W ON P.PNO=W.PNO
INNER JOIN DEPARTMENT AS D ON P.DNO=D.DNO WHERE W.HOURS>6 AND D.DNAME="IT";

-- Question 14
SELECT E.FNAME FROM EMPLOYEE AS E INNER JOIN DEPARTMENT AS D 
ON E.DNO=D.DNO 
INNER JOIN PROJECT AS P 
ON D.DNO=P.DNO 
GROUP BY (E.FNAME) HAVING COUNT(P.PNO)<=3;


-- Question 15
SELECT D.DNAME,COUNT(P.PNO) AS "PROJECTS ASSIGNED" FROM DEPARTMENT AS D INNER JOIN PROJECT AS P ON D.DNO=P.DNO
GROUP BY(D.DNO);

-- Question 16
SELECT MAX(SALARY) FROM EMPLOYEE;

-- Question 17
SELECT D.DNAME,MAX(E.SALARY) FROM EMPLOYEE AS E INNER JOIN DEPARTMENT AS D ON
D.DNO=E.DNO GROUP BY(D.DNO);

-- Question 18
SELECT E.FNAME,E.LNAME,M.FNAME,M.LNAME
FROM EMPLOYEE AS E
INNER JOIN EMPLOYEE AS M ON E.SUPERSSN=M.SSN;

-- Question 19
SELECT DISTINCT D.DNAME, COUNT(E.SUPERSSN) FROM EMPLOYEE AS E 
INNER JOIN  DEPARTMENT AS D ON D.DNO=E.DNO
GROUP BY(D.DNO);

-- Question 20
SELECT D.DNAME,D.MGRSSN,E.FNAME,E.LNAME FROM DEPARTMENT AS D 
INNER JOIN EMPLOYEE AS E ON E.DNO=D.DNO
GROUP BY (D.DNO);


-- Question 21
DROP VIEW IF EXISTS employee_details;
CREATE VIEW employee_details AS SELECT E.FNAME,E.LNAME,D.DNAME,P.PNAME FROM employee AS E
INNER JOIN department AS D ON E.DNO=D.DNO
INNER JOIN project AS P ON P.DNO=E.DNO
INNER JOIN works_on AS W ON W.SSN=E.SSN;

-- Question 22

-- Question 23
SELECT D.DNAME,COUNT(E.SSN),E.SALARY,AVG(E.SALARY) FROM EMPLOYEE AS E INNER JOIN DEPARTMENT AS D ON 
E.DNO=D.DNO GROUP BY(D.DNO) HAVING E.SALARY>AVG(E.SALARY);
SELECT * FROM EMPLOYEE;

-- Question 24

-- Question 25
SELECT FNAME,LNAME FROM EMPLOYEE WHERE TIMESTAMPDIFF(YEAR,DOB,CURDATE())=50;

-- Question 26
SELECT E.FNAME,E.LNAME FROM EMPLOYEE AS E 
INNER JOIN DEPARTMENT AS D ON E.DNO=D.DNO
INNER JOIN WORKS_ON AS W ON E.SSN=W.SSN WHERE D.DNAME="EC" AND W.HOURS=4;

-- Question 27
SELECT COUNT(P.PNO),W.HOURS FROM PROJECT AS P INNER JOIN WORKS_ON AS W 
ON P.PNO=W.PNO INNER JOIN DEPARTMENT AS D ON D.DNO=P.DNO
GROUP BY D.DNO HAVING (W.HOURS=4);
SELECT * FROM WORKS_ON;

-- Question 28
SELECT E.FNAME,E.LNAME,COUNT(W.PNO) AS C1 
FROM WORKS_ON AS W INNER JOIN EMPLOYEE AS E 
ON E.SSN=W.SSN GROUP BY(W.PNO) HAVING C1>3; 

-- Question 29
SELECT W.PNO FROM EMPLOYEE AS E INNER JOIN WORKS_ON AS W
ON E.SSN=W.SSN WHERE TIMESTAMPDIFF(YEAR,E.DOB,CURDATE())=(SELECT MAX(TIMESTAMPDIFF(YEAR,E.DOB,CURDATE())) FROM EMPLOYEE AS E);

-- Question 30 (Wrong)
SELECT D.DNAME,COUNT(W.PNO),E.DOB,MAX(TIMESTAMPDIFF(YEAR,E.DOB,CURDATE())) AS "AGE" FROM EMPLOYEE AS E INNER JOIN WORKS_ON AS W
ON E.SSN=W.SSN INNER JOIN DEPARTMENT AS D
ON D.DNO=E.DNO GROUP BY(D.DNO) HAVING (TIMESTAMPDIFF(YEAR,E.DOB,CURDATE()))=MAX(TIMESTAMPDIFF(YEAR,E.DOB,CURDATE()));

-- Question 31
SELECT E.FNAME,E.LNAME FROM EMPLOYEE AS E 
INNER JOIN WORKS_ON AS W ON E.SSN=W.SSN
INNER JOIN PROJECT AS P ON P.PNO=W.PNO
WHERE E.DNO<>P.DNO;

-- Question 32
DROP FUNCTION IF EXISTS PRODUCT;
DELIMITER $$
CREATE FUNCTION PRODUCT(NO1 INT,NO2 INT)
RETURNS INT
BEGIN
	DECLARE RES INT DEFAULT 0;
	SET RES=NO1+NO2;
	RETURN RES;
END$$
DELIMITER ;

SELECT PRODUCT(10,20);

-- Question 33
DROP FUNCTION IF EXISTS CHECKEVEN;
DELIMITER $$
CREATE FUNCTION CHECKEVEN(A INT)
RETURNS VARCHAR(3)
BEGIN 
	IF A%2=0 THEN
		RETURN "YES";
	ELSE 
		RETURN "NO";
	END IF;
END$$
DELIMITER ;
SELECT CHECKEVEN(5);

-- Question 34
DELIMITER $$
DROP FUNCTION IF EXISTS FACTORIAL;
CREATE FUNCTION FACTORIAL(A INT)
RETURNS INT 
BEGIN
	DECLARE RES INT DEFAULT 1;
	DECLARE COUNTER INT DEFAULT 1;
	facLoop:LOOP
		IF COUNTER=A+1 THEN
			LEAVE facLoop;
		END IF;
		SET RES=RES*COUNTER;
		SET COUNTER=COUNTER+1;
	END LOOP facLoop;
	RETURN RES;
END $$
DELIMITER ;
SELECT factorial(5);

-- Question 35
DROP FUNCTION IF EXISTS getEmpNames;
DELIMITER $$
CREATE FUNCTION getEmpNames()
RETURNS VARCHAR(300) DETERMINISTIC
BEGIN
	DECLARE finalResString VARCHAR(300) DEFAULT "";
    DECLARE tempFString VARCHAR(300) DEFAULT "";
    DECLARE tempLString VARCHAR(300) DEFAULT "";
    DECLARE tempString VARCHAR(300) DEFAULT "";
    DECLARE notFoundFlag INT DEFAULT 0;
    DECLARE selectEmpNames CURSOR FOR SELECT FNAME,LNAME FROM EMPLOYEE;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET notFoundFlag=1;
    OPEN selectEmpNames;
    fetchLoop:LOOP
		FETCH selectEmpNames INTO tempFString,tempLString;
		IF notFoundFlag=1 THEN
			LEAVE fetchLoop;
		END IF;
        SET tempString=CONCAT(tempFString,' ',tempLString);
        SET finalResString=CONCAT(finalResString,", ",tempString);
	END LOOP fetchLoop;
    CLOSE selectEmpNames;
    RETURN finalResString;
END$$
DELIMITER ;
SELECT getEmpNames();

-- Question 36
DROP PROCEDURE IF EXISTS  empInDept;
DELIMITER $$
CREATE PROCEDURE  empInDept(dept_no INT)
BEGIN
	SELECT E.FNAME,E.LNAME FROM EMPLOYEE AS E INNER JOIN DEPARTMENT AS D ON E.DNO=D.DNO WHERE D.DNO=dept_no;
END$$
DELIMITER ;
CALL empInDept(3);

-- Question 37
DROP PROCEDURE IF EXISTS  empInDept2;
DELIMITER $$
CREATE PROCEDURE  empInDept2(dept_name VARCHAR(50))
BEGIN
	SELECT E.FNAME,E.LNAME FROM EMPLOYEE AS E INNER JOIN DEPARTMENT AS D ON E.DNO=D.DNO WHERE D.DNAME=dept_name;
END$$
DELIMITER ;
CALL empInDept2("CS");

-- Question 38
DROP PROCEDURE IF EXISTS  empProjects;
DELIMITER $$
CREATE PROCEDURE  empProjects(dept_name VARCHAR(50))
BEGIN
	SELECT E.FNAME,E.LNAME,W.PNO FROM EMPLOYEE AS E 
    INNER JOIN WORKS_ON AS W ON E.SSN=W.SSN 
    INNER JOIN DEPARTMENT AS D ON D.DNO=E.DNO 
    WHERE D.DNAME=dept_name;
END$$
DELIMITER ;
CALL empProjects("CS"); 


-- Question 39
DROP PROCEDURE IF EXISTS salaryThirdToFifth;
DELIMITER $$
CREATE PROCEDURE salaryThirdToFifth()
BEGIN
SELECT * FROM EMPLOYEE AS E ORDER BY (E.SALARY) DESC LIMIT 3 OFFSET 2;
END $$
DELIMITER ;

-- Question 40
DROP PROCEDURE IF EXISTS  empWithFNameLengthFive;
DELIMITER $$
CREATE PROCEDURE  empWithFNameLengthFive()
BEGIN
	SELECT E.FNAME,E.LNAME FROM EMPLOYEE AS E WHERE LENGTH(E.FNAME)=5;
END$$
DELIMITER ;
CALL empWithFNameLengthFive();

-- Question 41
DROP PROCEDURE IF EXISTS empCntInDept;
DELIMITER $$
CREATE PROCEDURE empCntInDept(dept_name VARCHAR(30))
BEGIN
	SELECT D.DNAME,COUNT(E.SSN) FROM EMPLOYEE AS E 
	INNER JOIN DEPARTMENT AS D ON E.DNO=D.DNO
	GROUP BY(D.DNAME) HAVING D.DNAME=dept_name;
END $$
DELIMITER ;

-- Question 42
DROP PROCEDURE IF EXISTS projectsAssignedToEmp;
DELIMITER $$
CREATE PROCEDURE projectsAssignedToEmp(ssn INT)
BEGIN
	SELECT P.PNAME FROM WORKS_ON AS W 
    INNER JOIN EMPLOYEE AS E ON E.SSN=W.SSN
    INNER JOIN PROJECT AS P ON P.PNO=W.PNO
	WHERE E.SSN=ssn;
END $$
DELIMITER ;
CALL  projectsAssignedToEmp(1);

-- Question 43
DROP PROCEDURE IF EXISTS insertDepartment;
DELIMITER $$
CREATE PROCEDURE insertDepartment(dept_no INT, dept_name VARCHAR(30))
BEGIN
	DECLARE EXIT HANDLER FOR 1062
    BEGIN
		SELECT "DUPLICATE KEYS NOT ALLOWED" AS "ERROR"; 
    END;
    INSERT INTO DEPARTMENT(DNO,DNAME)
    VALUES (dept_no,dept_name);
END$$
DELIMITER ;
CALL insertDepartment(1,"RB");

-- Question 44
CREATE TABLE works_on_backup
(
ssn INT, 
pno INT,
hours INT,
PRIMARY KEY(ssn,pno),
FOREIGN KEY (ssn) REFERENCES employee(ssn),
FOREIGN KEY (pno) REFERENCES project(pno)
);

DROP TRIGGER IF EXISTS tr_works_on_backup;
DELIMITER $$
CREATE TRIGGER tr_works_on_backup AFTER INSERT ON works_on
FOR EACH ROW
BEGIN
	DECLARE CONTINUE HANDLER FOR 1062
    BEGIN
		UPDATE works_on_backup SET HOURS=NEW.HOURS WHERE SSN=NEW.SSN AND PNO.NEW.PNO;
    END;
    INSERT INTO works_on_backup(ssn,pno,hours)
	VALUES (NEW.SSN,NEW.PNO,NEW.HOURS);
END$$
DELIMITER ;
INSERT INTO works_on (ssn,pno,hours)
VALUES
(1,3,10);

-- Question 45
DROP TRIGGER IF EXISTS tr_check_salary_emp;
DELIMITER $$
CREATE TRIGGER tr_check_salary_emp BEFORE INSERT ON employee
FOR EACH ROW
BEGIN
	IF NEW.SALARY<8000 THEN 
    BEGIN
		SIGNAL SQLSTATE "45000" SET MESSAGE_TEXT="SALARY CANNOT BE LESS THAN 8000";
    END;
    END IF;
END$$
DELIMITER ;
SELECT * FROM EMPLOYEE;
INSERT INTO employee(ssn,fname,lname,address,sex,salary) VALUES 
(6,'Roshan','Aji','Trivandrum','M',3000);

-- Question 46
DROP TRIGGER IF EXISTS tr_disallow_mapped_department_deletion;
DELIMITER $$
CREATE TRIGGER  tr_disallow_mapped_department_deletion BEFORE DELETE ON department
FOR EACH ROW
BEGIN 
-- 	DECLARE EXIT HANDLER FOR 1451
--     BEGIN 
		SIGNAL SQLSTATE "45000" SET MESSAGE_TEXT="ERROR";
    -- END;
END$$
DELIMITER ;
DELETE FROM department WHERE dno=6;
INSERT INTO department  
(dno,dname,mgrstartdate) VALUES
(6,'CS',"2020-05-12");

-- Question 47
DROP TRIGGER IF EXISTS tr_check_updated_salary;
DELIMITER $$
CREATE TRIGGER tr_check_updated_salary BEFORE UPDATE ON employee
FOR EACH ROW
BEGIN
	IF NEW.SALARY<OLD.SALARY THEN
		SIGNAL SQLSTATE "45000" SET MESSAGE_TEXT="NEW SALARY LESS THAN OLD SALARY";
    END IF;
END$$
DELIMITER ;
UPDATE EMPLOYEE SET SALARY=25000 WHERE SSN=1;

